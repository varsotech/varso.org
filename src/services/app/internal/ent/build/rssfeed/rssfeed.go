// Code generated by ent, DO NOT EDIT.

package rssfeed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the rssfeed type in the database.
	Label = "rss_feed"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldRssFeedURL holds the string denoting the rss_feed_url field in the database.
	FieldRssFeedURL = "rss_feed_url"
	// FieldContentWhitelistRegex holds the string denoting the content_whitelist_regex field in the database.
	FieldContentWhitelistRegex = "content_whitelist_regex"
	// FieldHTMLPaywallRegex holds the string denoting the html_paywall_regex field in the database.
	FieldHTMLPaywallRegex = "html_paywall_regex"
	// FieldTitleTrimRight holds the string denoting the title_trim_right field in the database.
	FieldTitleTrimRight = "title_trim_right"
	// FieldRssFeedRank holds the string denoting the rss_feed_rank field in the database.
	FieldRssFeedRank = "rss_feed_rank"
	// FieldMaxFetchIntervalMin holds the string denoting the max_fetch_interval_min field in the database.
	FieldMaxFetchIntervalMin = "max_fetch_interval_min"
	// FieldDiscardOgImage holds the string denoting the discard_og_image field in the database.
	FieldDiscardOgImage = "discard_og_image"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// Table holds the table name of the rssfeed in the database.
	Table = "rss_feeds"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "news_items"
	// ItemsInverseTable is the table name for the NewsItem entity.
	// It exists in this package in order to avoid circular dependency with the "newsitem" package.
	ItemsInverseTable = "news_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "news_item_feed"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "rss_feeds"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_feeds"
)

// Columns holds all SQL columns for rssfeed fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldRssFeedURL,
	FieldContentWhitelistRegex,
	FieldHTMLPaywallRegex,
	FieldTitleTrimRight,
	FieldRssFeedRank,
	FieldMaxFetchIntervalMin,
	FieldDiscardOgImage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rss_feeds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_feeds",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the RSSFeed queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByRssFeedURL orders the results by the rss_feed_url field.
func ByRssFeedURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRssFeedURL, opts...).ToFunc()
}

// ByContentWhitelistRegex orders the results by the content_whitelist_regex field.
func ByContentWhitelistRegex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentWhitelistRegex, opts...).ToFunc()
}

// ByHTMLPaywallRegex orders the results by the html_paywall_regex field.
func ByHTMLPaywallRegex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLPaywallRegex, opts...).ToFunc()
}

// ByTitleTrimRight orders the results by the title_trim_right field.
func ByTitleTrimRight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleTrimRight, opts...).ToFunc()
}

// ByRssFeedRank orders the results by the rss_feed_rank field.
func ByRssFeedRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRssFeedRank, opts...).ToFunc()
}

// ByMaxFetchIntervalMin orders the results by the max_fetch_interval_min field.
func ByMaxFetchIntervalMin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxFetchIntervalMin, opts...).ToFunc()
}

// ByDiscardOgImage orders the results by the discard_og_image field.
func ByDiscardOgImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscardOgImage, opts...).ToFunc()
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ItemsTable, ItemsColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
