// Code generated by ent, DO NOT EDIT.

package rssfeed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/luminancetech/varso/src/services/app/internal/ent/build/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldUpdateTime, v))
}

// RssFeedURL applies equality check predicate on the "rss_feed_url" field. It's identical to RssFeedURLEQ.
func RssFeedURL(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldRssFeedURL, v))
}

// ContentWhitelistRegex applies equality check predicate on the "content_whitelist_regex" field. It's identical to ContentWhitelistRegexEQ.
func ContentWhitelistRegex(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldContentWhitelistRegex, v))
}

// HTMLPaywallRegex applies equality check predicate on the "html_paywall_regex" field. It's identical to HTMLPaywallRegexEQ.
func HTMLPaywallRegex(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldHTMLPaywallRegex, v))
}

// TitleTrimRight applies equality check predicate on the "title_trim_right" field. It's identical to TitleTrimRightEQ.
func TitleTrimRight(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldTitleTrimRight, v))
}

// RssFeedRank applies equality check predicate on the "rss_feed_rank" field. It's identical to RssFeedRankEQ.
func RssFeedRank(v float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldRssFeedRank, v))
}

// MaxFetchIntervalMin applies equality check predicate on the "max_fetch_interval_min" field. It's identical to MaxFetchIntervalMinEQ.
func MaxFetchIntervalMin(v int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldMaxFetchIntervalMin, v))
}

// DiscardOgImage applies equality check predicate on the "discard_og_image" field. It's identical to DiscardOgImageEQ.
func DiscardOgImage(v bool) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldDiscardOgImage, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldUpdateTime, v))
}

// RssFeedURLEQ applies the EQ predicate on the "rss_feed_url" field.
func RssFeedURLEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldRssFeedURL, v))
}

// RssFeedURLNEQ applies the NEQ predicate on the "rss_feed_url" field.
func RssFeedURLNEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldRssFeedURL, v))
}

// RssFeedURLIn applies the In predicate on the "rss_feed_url" field.
func RssFeedURLIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldRssFeedURL, vs...))
}

// RssFeedURLNotIn applies the NotIn predicate on the "rss_feed_url" field.
func RssFeedURLNotIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldRssFeedURL, vs...))
}

// RssFeedURLGT applies the GT predicate on the "rss_feed_url" field.
func RssFeedURLGT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldRssFeedURL, v))
}

// RssFeedURLGTE applies the GTE predicate on the "rss_feed_url" field.
func RssFeedURLGTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldRssFeedURL, v))
}

// RssFeedURLLT applies the LT predicate on the "rss_feed_url" field.
func RssFeedURLLT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldRssFeedURL, v))
}

// RssFeedURLLTE applies the LTE predicate on the "rss_feed_url" field.
func RssFeedURLLTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldRssFeedURL, v))
}

// RssFeedURLContains applies the Contains predicate on the "rss_feed_url" field.
func RssFeedURLContains(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContains(FieldRssFeedURL, v))
}

// RssFeedURLHasPrefix applies the HasPrefix predicate on the "rss_feed_url" field.
func RssFeedURLHasPrefix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasPrefix(FieldRssFeedURL, v))
}

// RssFeedURLHasSuffix applies the HasSuffix predicate on the "rss_feed_url" field.
func RssFeedURLHasSuffix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasSuffix(FieldRssFeedURL, v))
}

// RssFeedURLEqualFold applies the EqualFold predicate on the "rss_feed_url" field.
func RssFeedURLEqualFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEqualFold(FieldRssFeedURL, v))
}

// RssFeedURLContainsFold applies the ContainsFold predicate on the "rss_feed_url" field.
func RssFeedURLContainsFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContainsFold(FieldRssFeedURL, v))
}

// ContentWhitelistRegexEQ applies the EQ predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexNEQ applies the NEQ predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexNEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexIn applies the In predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldContentWhitelistRegex, vs...))
}

// ContentWhitelistRegexNotIn applies the NotIn predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexNotIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldContentWhitelistRegex, vs...))
}

// ContentWhitelistRegexGT applies the GT predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexGT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexGTE applies the GTE predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexGTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexLT applies the LT predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexLT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexLTE applies the LTE predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexLTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexContains applies the Contains predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexContains(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContains(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexHasPrefix applies the HasPrefix predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexHasPrefix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasPrefix(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexHasSuffix applies the HasSuffix predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexHasSuffix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasSuffix(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexIsNil applies the IsNil predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexIsNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIsNull(FieldContentWhitelistRegex))
}

// ContentWhitelistRegexNotNil applies the NotNil predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexNotNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotNull(FieldContentWhitelistRegex))
}

// ContentWhitelistRegexEqualFold applies the EqualFold predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexEqualFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEqualFold(FieldContentWhitelistRegex, v))
}

// ContentWhitelistRegexContainsFold applies the ContainsFold predicate on the "content_whitelist_regex" field.
func ContentWhitelistRegexContainsFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContainsFold(FieldContentWhitelistRegex, v))
}

// HTMLPaywallRegexEQ applies the EQ predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexNEQ applies the NEQ predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexNEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexIn applies the In predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldHTMLPaywallRegex, vs...))
}

// HTMLPaywallRegexNotIn applies the NotIn predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexNotIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldHTMLPaywallRegex, vs...))
}

// HTMLPaywallRegexGT applies the GT predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexGT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexGTE applies the GTE predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexGTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexLT applies the LT predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexLT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexLTE applies the LTE predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexLTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexContains applies the Contains predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexContains(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContains(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexHasPrefix applies the HasPrefix predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexHasPrefix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasPrefix(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexHasSuffix applies the HasSuffix predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexHasSuffix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasSuffix(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexIsNil applies the IsNil predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexIsNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIsNull(FieldHTMLPaywallRegex))
}

// HTMLPaywallRegexNotNil applies the NotNil predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexNotNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotNull(FieldHTMLPaywallRegex))
}

// HTMLPaywallRegexEqualFold applies the EqualFold predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexEqualFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEqualFold(FieldHTMLPaywallRegex, v))
}

// HTMLPaywallRegexContainsFold applies the ContainsFold predicate on the "html_paywall_regex" field.
func HTMLPaywallRegexContainsFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContainsFold(FieldHTMLPaywallRegex, v))
}

// TitleTrimRightEQ applies the EQ predicate on the "title_trim_right" field.
func TitleTrimRightEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldTitleTrimRight, v))
}

// TitleTrimRightNEQ applies the NEQ predicate on the "title_trim_right" field.
func TitleTrimRightNEQ(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldTitleTrimRight, v))
}

// TitleTrimRightIn applies the In predicate on the "title_trim_right" field.
func TitleTrimRightIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldTitleTrimRight, vs...))
}

// TitleTrimRightNotIn applies the NotIn predicate on the "title_trim_right" field.
func TitleTrimRightNotIn(vs ...string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldTitleTrimRight, vs...))
}

// TitleTrimRightGT applies the GT predicate on the "title_trim_right" field.
func TitleTrimRightGT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldTitleTrimRight, v))
}

// TitleTrimRightGTE applies the GTE predicate on the "title_trim_right" field.
func TitleTrimRightGTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldTitleTrimRight, v))
}

// TitleTrimRightLT applies the LT predicate on the "title_trim_right" field.
func TitleTrimRightLT(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldTitleTrimRight, v))
}

// TitleTrimRightLTE applies the LTE predicate on the "title_trim_right" field.
func TitleTrimRightLTE(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldTitleTrimRight, v))
}

// TitleTrimRightContains applies the Contains predicate on the "title_trim_right" field.
func TitleTrimRightContains(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContains(FieldTitleTrimRight, v))
}

// TitleTrimRightHasPrefix applies the HasPrefix predicate on the "title_trim_right" field.
func TitleTrimRightHasPrefix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasPrefix(FieldTitleTrimRight, v))
}

// TitleTrimRightHasSuffix applies the HasSuffix predicate on the "title_trim_right" field.
func TitleTrimRightHasSuffix(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldHasSuffix(FieldTitleTrimRight, v))
}

// TitleTrimRightIsNil applies the IsNil predicate on the "title_trim_right" field.
func TitleTrimRightIsNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIsNull(FieldTitleTrimRight))
}

// TitleTrimRightNotNil applies the NotNil predicate on the "title_trim_right" field.
func TitleTrimRightNotNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotNull(FieldTitleTrimRight))
}

// TitleTrimRightEqualFold applies the EqualFold predicate on the "title_trim_right" field.
func TitleTrimRightEqualFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEqualFold(FieldTitleTrimRight, v))
}

// TitleTrimRightContainsFold applies the ContainsFold predicate on the "title_trim_right" field.
func TitleTrimRightContainsFold(v string) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldContainsFold(FieldTitleTrimRight, v))
}

// RssFeedRankEQ applies the EQ predicate on the "rss_feed_rank" field.
func RssFeedRankEQ(v float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldRssFeedRank, v))
}

// RssFeedRankNEQ applies the NEQ predicate on the "rss_feed_rank" field.
func RssFeedRankNEQ(v float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldRssFeedRank, v))
}

// RssFeedRankIn applies the In predicate on the "rss_feed_rank" field.
func RssFeedRankIn(vs ...float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldRssFeedRank, vs...))
}

// RssFeedRankNotIn applies the NotIn predicate on the "rss_feed_rank" field.
func RssFeedRankNotIn(vs ...float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldRssFeedRank, vs...))
}

// RssFeedRankGT applies the GT predicate on the "rss_feed_rank" field.
func RssFeedRankGT(v float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldRssFeedRank, v))
}

// RssFeedRankGTE applies the GTE predicate on the "rss_feed_rank" field.
func RssFeedRankGTE(v float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldRssFeedRank, v))
}

// RssFeedRankLT applies the LT predicate on the "rss_feed_rank" field.
func RssFeedRankLT(v float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldRssFeedRank, v))
}

// RssFeedRankLTE applies the LTE predicate on the "rss_feed_rank" field.
func RssFeedRankLTE(v float32) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldRssFeedRank, v))
}

// RssFeedRankIsNil applies the IsNil predicate on the "rss_feed_rank" field.
func RssFeedRankIsNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIsNull(FieldRssFeedRank))
}

// RssFeedRankNotNil applies the NotNil predicate on the "rss_feed_rank" field.
func RssFeedRankNotNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotNull(FieldRssFeedRank))
}

// MaxFetchIntervalMinEQ applies the EQ predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinEQ(v int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldMaxFetchIntervalMin, v))
}

// MaxFetchIntervalMinNEQ applies the NEQ predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinNEQ(v int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldMaxFetchIntervalMin, v))
}

// MaxFetchIntervalMinIn applies the In predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinIn(vs ...int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIn(FieldMaxFetchIntervalMin, vs...))
}

// MaxFetchIntervalMinNotIn applies the NotIn predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinNotIn(vs ...int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotIn(FieldMaxFetchIntervalMin, vs...))
}

// MaxFetchIntervalMinGT applies the GT predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinGT(v int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGT(FieldMaxFetchIntervalMin, v))
}

// MaxFetchIntervalMinGTE applies the GTE predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinGTE(v int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldGTE(FieldMaxFetchIntervalMin, v))
}

// MaxFetchIntervalMinLT applies the LT predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinLT(v int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLT(FieldMaxFetchIntervalMin, v))
}

// MaxFetchIntervalMinLTE applies the LTE predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinLTE(v int64) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldLTE(FieldMaxFetchIntervalMin, v))
}

// MaxFetchIntervalMinIsNil applies the IsNil predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinIsNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldIsNull(FieldMaxFetchIntervalMin))
}

// MaxFetchIntervalMinNotNil applies the NotNil predicate on the "max_fetch_interval_min" field.
func MaxFetchIntervalMinNotNil() predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNotNull(FieldMaxFetchIntervalMin))
}

// DiscardOgImageEQ applies the EQ predicate on the "discard_og_image" field.
func DiscardOgImageEQ(v bool) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldEQ(FieldDiscardOgImage, v))
}

// DiscardOgImageNEQ applies the NEQ predicate on the "discard_og_image" field.
func DiscardOgImageNEQ(v bool) predicate.RSSFeed {
	return predicate.RSSFeed(sql.FieldNEQ(FieldDiscardOgImage, v))
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.RSSFeed {
	return predicate.RSSFeed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.NewsItem) predicate.RSSFeed {
	return predicate.RSSFeed(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.RSSFeed {
	return predicate.RSSFeed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.RSSFeed {
	return predicate.RSSFeed(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RSSFeed) predicate.RSSFeed {
	return predicate.RSSFeed(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RSSFeed) predicate.RSSFeed {
	return predicate.RSSFeed(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RSSFeed) predicate.RSSFeed {
	return predicate.RSSFeed(sql.NotPredicates(p))
}
